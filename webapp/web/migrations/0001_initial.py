# -*- coding: utf-8 -*-
# Generated by Django 1.9.6 on 2016-09-19 16:59
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=30, unique=True, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.')], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('age', models.IntegerField(null=True)),
            ],
            options={
                'verbose_name_plural': 'users',
                'abstract': False,
                'verbose_name': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='clusterInformations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FoodBaseTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=24, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='FoodInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=24)),
            ],
        ),
        migrations.CreateModel(
            name='RestaurantInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=24)),
                ('location', models.CharField(max_length=20)),
                ('address', models.CharField(max_length=100)),
                ('telephone', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='clusterFoodScores',
            fields=[
                ('cluster_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='web.clusterInformations')),
                ('predictable_score', models.FloatField()),
                ('tag_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.FoodBaseTag')),
            ],
        ),
        migrations.CreateModel(
            name='clusterPositions',
            fields=[
                ('cluster_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='web.clusterInformations')),
                ('pos', models.FloatField()),
                ('tag_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.FoodBaseTag')),
            ],
        ),
        migrations.CreateModel(
            name='clusterTagScores',
            fields=[
                ('cluster_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='web.clusterInformations')),
                ('mean', models.FloatField(null=True)),
                ('number', models.FloatField(null=True)),
                ('tag_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.FoodBaseTag')),
            ],
        ),
        migrations.CreateModel(
            name='FoodTags',
            fields=[
                ('foodId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='web.FoodInfo')),
                ('tagId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.FoodBaseTag')),
            ],
        ),
        migrations.CreateModel(
            name='RestaurantMenus',
            fields=[
                ('restaurantId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='web.RestaurantInfo')),
                ('foodId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.FoodInfo')),
            ],
        ),
        migrations.CreateModel(
            name='UserEvaluations',
            fields=[
                ('userID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('score', models.IntegerField()),
                ('foodID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.FoodInfo')),
            ],
        ),
        migrations.AddField(
            model_name='userinfo',
            name='cluster_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='web.clusterInformations'),
        ),
        migrations.AddField(
            model_name='userinfo',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='userinfo',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='userevaluations',
            unique_together=set([('userID', 'foodID')]),
        ),
        migrations.AlterUniqueTogether(
            name='restaurantmenus',
            unique_together=set([('restaurantId', 'foodId')]),
        ),
        migrations.AlterUniqueTogether(
            name='foodtags',
            unique_together=set([('foodId', 'tagId')]),
        ),
        migrations.AlterUniqueTogether(
            name='clustertagscores',
            unique_together=set([('cluster_id', 'tag_id')]),
        ),
        migrations.AlterUniqueTogether(
            name='clusterpositions',
            unique_together=set([('cluster_id', 'tag_id')]),
        ),
        migrations.AlterUniqueTogether(
            name='clusterfoodscores',
            unique_together=set([('cluster_id', 'tag_id')]),
        ),
    ]
